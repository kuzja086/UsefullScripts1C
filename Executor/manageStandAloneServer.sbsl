конст ПутиV8 = {"eq": "c:\\Program Files\\1Cv8\\", "ne": "c:\\Program Files (x86)\\1Cv8\\"}

метод Скрипт(ИмяПользователяСервера : Строка, ПарольПользователяСервера : Строка, Версия : Строка, ПутьККонфигурацииСервера : Строка)
    // set SrvcUserName=<пользователь автономного сервера>
    // set SrvcUserPwd=<пароль пользователя автономного сервера>
    // set SrvcName="Standalone server %2"
    // set BinPath="\"C:\Program Files\1cv8\%1\bin\ibsrv.exe\" --service --config=\"%~3\""
    // set Desctiption="Автономный сервер 1С:Предприятия 8.3. Копия #%2"
    // sc stop %SrvcName%
    // sc delete %SrvcName%
    // sc create %SrvcName% binPath= %BinPath% start= auto obj= %SrvcUserName% password= %SrvcUserPwd% displayname= %Desctiption%
    пер ИмяСервиса = "1C:Standalone server %Версия"
    пер Описание = "1C:Автономный сервер 1С:Предприятия %Версия"
    пер ПутьКСерверу = ПолучитьПутьКСерверу(Версия)

    пер МассивУдаленияСлужбы = новый Массив()
    МассивУдаленияСлужбы.Добавить("/c")
    МассивУдаленияСлужбы.Добавить("sc")
    МассивУдаленияСлужбы.Добавить("delete")
    МассивУдаленияСлужбы.Добавить("%ИмяСервиса")
    пер ПроцессУдаленияСервиса = новый ПроцессОс("cmd.exe", МассивУдаленияСлужбы)
    ПроцессУдаленияСервиса.Запустить()
    ПроцессУдаленияСервиса.ОжидатьЗавершения()
    если ПроцессУдаленияСервиса.ПолучитьКодВозврата() != 0
        Консоль.Записать(ПроцессУдаленияСервиса.ПолучитьПотокВывода().ПрочитатьКакТекст("cp866"))
    иначе
        Консоль.Записать("Служба успешно Удалена")
    ;

    пер бин = "\"%ПутьКСерверу\" --service --config=\"%ПутьККонфигурацииСервера\"\""
    Консоль.Записать(бин)
    пер МассивСозданияСервиса = новый Массив()
    МассивСозданияСервиса.Добавить("/c")
    МассивСозданияСервиса.Добавить("sc")
    МассивСозданияСервиса.Добавить("create")
    МассивСозданияСервиса.Добавить("%ИмяСервиса")
    МассивСозданияСервиса.Добавить("binPath=%бин")
    МассивСозданияСервиса.Добавить("--service")
    МассивСозданияСервиса.Добавить("--config=\"%ПутьККонфигурацииСервера\"\"")
    МассивСозданияСервиса.Добавить("start=auto")
    //МассивСозданияСервиса.Добавить("obj=%ИмяПользователяСервера")
    //МассивСозданияСервиса.Добавить("password=%ПарольПользователяСервера")
    МассивСозданияСервиса.Добавить("displayName=%Описание")
    пер ПроцессСозданияСервиса = новый ПроцессОс("cmd.exe", МассивСозданияСервиса)
    ПроцессСозданияСервиса.Запустить()
    ПроцессСозданияСервиса.ОжидатьЗавершения()
    ПроцессСозданияСервиса.ПолучитьПотокВвода().Закрыть()
    если ПроцессСозданияСервиса.ПолучитьКодВозврата() != 0
        Консоль.Записать(ПроцессСозданияСервиса.ПолучитьПотокВывода().ПрочитатьКакТекст("cp866"))
    иначе
        Консоль.Записать("Служба успешно создана")
    ;

    // ПроцессРегистрацииАвтономногоСервера.Остановить()
    // ibcmd server config import --cluster-data="d:\1C srvinfo" --name=demoma --out=d:\ss-cfgs\demoma.yml
    // ibcmd server config init --dbms=postgresql --db-server=dbServerName --db-user=dbUser --db-pwd=dbUserPassword --db-name=dbName --name=docsIB --base=/webAccess
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ПолучитьПутьКСерверу(Версия: Строка) : Строка
    пер АрхитектураОС: Число = ТекущаяАрхитектура()
    пер ПутьV8: Строка

    если Версия.ЧислоВхождений(".") != 3
        Консоль.ЗаписатьОшибку("Номер версии указан некорректно")
        выбросить новый ИсключениеНедопустимоеСостояние("Номер версии указан некорректно")
    ;
    выбор

    когда АрхитектураОС == 32
        ПутьV8 = ПутиV8["ne"]
    когда АрхитектураОС == 64
        ПутьV8 = ПутиV8["eq"]
    иначе
        выбросить новый ИсключениеНедопустимоеСостояние("64-разрядная платформа V8 не может быть установлена на 32-разрядной ОС")
    ;

    пер ПутьКСерверу = "%ПутьV8%Версия\\bin\\ibsrv.exe"
    возврат ПутьКСерверу
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ТекущаяАрхитектура(): Число
    пер Архитектура = СредаИсполнения.ПолучитьПеременную("PROCESSOR_ARCHITECTURE")
    пер Результат = 0
    выбор Архитектура.ВВерхнийРегистр()
    когда == "AMD64"
        Результат = 64
    когда == "X86"
        Результат = 32
    иначе
        Результат = 32
    ;
    возврат Результат
;