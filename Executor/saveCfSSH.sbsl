конст ПутиV8 = {"eq": "c:\\Program Files\\1Cv8\\", "ne": "c:\\Program Files (x86)\\1Cv8\\"}
конст РабочийКаталогПоУмолчанию = "c:\\temp\\executor\\"

метод Скрипт(ИмяБазы : Строка, Сервер : Строка = "", Версия : Строка, ИмяПользователя : Строка, Пароль : Строка,
    РабочийКаталог : Строка = "")
    пер ПутьКБазе = ПолучитьПутьКБазе(ИмяБазы, Сервер)
    пер ПроцессАгента = ЗапуститьАгентКонфигуратора(Версия, ПутьКБазе, РабочийКаталог)
    
    попытка 
        исп СоединениеАгент = новый СоединениеSsh("127.0.0.1", 1543, ИмяПользователя, Пароль)
        исп Агент = СоединениеАгент.ОткрытьКонсоль()
            
        Агент.СтрокаПриглашения = "designer> "
        Агент.Выполнить("options set --notify-progress yes")
        Агент.Выполнить("options set --notify-progress-interval 10.0")
        Агент.Выполнить("common connect-ib")
        Консоль.Записать("Подключена база: " + ИмяБазы) 
        пер ТекущаяДата = ДатаВремя.Сейчас().Форматировать("ддММггггЧЧммсс")
        пер ИмяФайла = "configuration_%ИмяБазы%ТекущаяДата.cf"
        // TODO Имя базы дополнить для файловой базы
        Агент.Отправить("config dump-cfg --file=%ИмяФайла")
        Консоль.Записать(Агент.Вывод.ПрочитатьКакТекст())
        
        если РабочийКаталог.Пусто()
            РабочийКаталог = РабочийКаталогПоУмолчанию
        ;
        пер ФайлВыгрузки = новый Файл(РабочийКаталог + "0\\" + ИмяФайла)
        пер вывод = ""
        пока не ФайлВыгрузки.Существует()
            вывод = Агент.Вывод.ПрочитатьКакТекст()
            если не вывод.Пусто()
                Консоль.Записать(вывод)    
            ;
        ;
        Агент.Выполнить("common shutdown")    
    вконце
        если ПроцессАгента.Живой() 
            ПроцессАгента.Остановить()
        ;
    ;   
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ЗапуститьАгентКонфигуратора(Версия: Строка, ПутьКБазе : Строка, РабочийКаталог : Строка = "") : ПроцессОс
    пер АрхитектураОС: Число = ТекущаяАрхитектура()
    пер ПутьV8: Строка

    если Версия.ЧислоВхождений(".") != 3
        Консоль.ЗаписатьОшибку("Номер версии указан некорректно")
        выбросить новый ИсключениеНедопустимоеСостояние("Номер версии указан некорректно")
    ;
    выбор

    когда АрхитектураОС == 32
        ПутьV8 = ПутиV8["eq"]
    когда АрхитектураОС == 64
        ПутьV8 = ПутиV8["ne"]
    иначе
        выбросить новый ИсключениеНедопустимоеСостояние("64-разрядная платформа V8 не может быть установлена на 32-разрядной ОС")
    ;

    пер Образ = новый Файл("%ПутьV8\\%Версия\\bin\\1cv8.exe")
    если не Образ.Существует()
        Консоль.ЗаписатьОшибку("Экземляр платформы 1с не обнаружен в каталоге: " + Образ.Каталог) 
    ;

    если РабочийКаталог.Пусто()
        РабочийКаталог = "/AgentBaseDir " + РабочийКаталогПоУмолчанию
    иначе
        РабочийКаталог = "/AgentBaseDir " + РабочийКаталог
    ;

    пер Процесс = новый ПроцессОс(Образ.Путь, ["DESIGNER", ПутьКБазе, "/AgentMode", "/AgentSSHHostKeyAuto", РабочийКаталог])
    Процесс.Запустить(СредаИсполнения.ПолучитьПеременную("temp"))
    если не Процесс.Живой()
        Консоль.ЗаписатьОшибку("Что-то пошло не так. Процесс 1с - не живой :(")
    иначе
        Консоль.Записать("Конфигуратор запущен в режиме агента")
    ;
    возврат Процесс
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ПолучитьПутьКБазе(ИмяБазы : Строка, Сервер : Строка) : Строка
    пер путьКБазе : Строка
    если Сервер == "" 
        путьКБазе = "/F%ИмяБазы"
    иначе
        путьКБазе = "/s%Сервер\\%ИмяБазы"
    ;
    возврат путьКБазе   
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ТекущаяАрхитектура(): Число
    пер Архитектура = СредаИсполнения.ПолучитьПеременную("PROCESSOR_ARCHITECTURE")
    пер Результат = 0
    выбор Архитектура.ВВерхнийРегистр()
    когда == "AMD64"
        Результат = 64
    когда == "X86"
        Результат = 32
    иначе
        Результат = 32
    ;
    возврат Результат
;