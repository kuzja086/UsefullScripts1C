конст ПутиV8 = {"eq": "c:\\Program Files\\1Cv8\\", "ne": "c:\\Program Files (x86)\\1Cv8\\"}
конст РабочийКаталогПоУмолчанию = "c:\\temp\\executor\\"
конст РежимЗапуска = {0 : "DESIGNER", 1 : "ENTERPRISE"}

метод Скрипт(ПутьКФайлуНастроек : Строка)
    // Обновить конфигурацию из хранилища
    // Выгрузить конфигурацию в файлы
    // Конвертировать в формат EDT
    //  Коммит и пуш в гит
    // запуск задания в Jenkins
    пер ФайлНастроек = новый Файл(ПутьКФайлуНастроек)
    пер Настройки = СериализацияJson.ПрочитатьОбъект(ФайлНастроек.ОткрытьПотокЧтения())
    
    пер ИмяБазы = Настройки["base"]
    Консоль.Записать("Имя базы: %ИмяБазы")
    пер Сервер = Настройки["server"]
    Консоль.Записать("Адрес сервера: %Сервер")
    пер Версия = Настройки["platformVersion"]
    Консоль.Записать("Версия платформы: %Версия")
    пер ИмяПользователя = Настройки["baseUsername"]
    Консоль.Записать("Пользователь  базы: %ИмяПользователя")
    пер Пароль = Настройки["basePassword"]
    Консоль.Записать("Пароль: %Пароль")
    пер ПутьКХранилищу = Настройки["storage"]
    Консоль.Записать("Хранилище: %ПутьКХранилищу")
    пер ИмяПользователяХранилища = Настройки["storageUser"]
    Консоль.Записать("Пользователь хранилища: %ИмяПользователяХранилища")
    пер ПарольПользователяХранилища = Настройки["storagePassword"]
    пер КаталогВыгрузки = Настройки["exportDirectory"]
    Консоль.Записать("Католог выгрузки: %КаталогВыгрузки")
    пер КаталогGIT = Настройки["gitDirectory"]
    Консоль.Записать("Католог GIT: %КаталогGIT")
    пер ВерсияEDT = Настройки["edtVersion"]
    Консоль.Записать("Версия EDT: %ВерсияEDT")
    пер ИмяПроекта = Настройки["projectName"]
    Консоль.Записать(ИмяПроекта)

    пер ПутьКБазе = ПолучитьПутьКБазе(ИмяБазы, Сервер)
    пер ПроцессАгента = ЗапуститьАгентКонфигуратора(Версия, ПутьКБазе, "")
    
    если КаталогВыгрузки.Пусто()      
        КаталогВыгрузки = РабочийКаталогПоУмолчанию + "%ИмяБазы"
    ;
    
    если КаталогGIT.Пусто()      
        КаталогGIT = РабочийКаталогПоУмолчанию
    ;

    пер имяФайлаПараметров = КаталогGIT + ИмяПроекта + ".properties"
    пер Токен = Консоль.СчитатьСтроку("Укажите токен для анализа в SonarQube: ")

    // ОбновитьКонфигурациюИзХранилища(ИмяБазы, Сервер, ИмяПользователя, Пароль, ПутьКХранилищу, ИмяПользователяХранилища, ПарольПользователяХранилища, Версия)
    // ВыгрузитьКонфигурациюВФайлы(ИмяПользователя, Пароль, КаталогВыгрузки)
    КонвертацияВФорматEDT(КаталогВыгрузки, КаталогGIT, ВерсияEDT, ИмяПроекта)
    // Добавить проверку EDT и трансформацию результатов в формат sonarqube
    // СохранитьНастройкиСканера(имяФайлаПараметров, СерверSonarQube, ИмяПроекта, ИмяПроекта, , ПутьКонфигурацииEDT,)
    // ЗапуститьSonarScanner(имяФайлаПараметров, Токен)

    ПроцессАгента.Остановить()
;

// TODO Общая Библиотека
метод ОбновитьКонфигурациюИзХранилища(ИмяБазы : Строка, Сервер : Строка, ИмяПользователя : Строка, Пароль : Строка, ПутьКХранилищу : Строка, ИмяПользователяХранилища : Строка, ПарольПользователяХранилища : Строка, Версия : Строка, ПутьКЛогамКонфигуратора : Строка = "")
    Консоль.Записать("")
    Консоль.Записать("Обновление конфигурации из хранилища")
    
    пер ПутьКБазе = ПолучитьПутьКБазе(ИмяБазы, Сервер)
    пер МассивАргументов = ПолучитьОбщийМассивПараметров(ПутьКБазе, ИмяПользователя, Пароль)       
    пер МассивАргументовХранилища = ПолучитьМассивДляРаботыСХранилищем(ПутьКХранилищу, ИмяПользователяХранилища, ПарольПользователяХранилища)

    МассивАргументов.ДобавитьВсе(МассивАргументовХранилища)
    
    МассивАргументов.Добавить("/ConfigurationRepositoryUpdateCfg")
    МассивАргументов.Добавить("-force")
    МассивАргументов.Добавить("/UpdateDBCfg")
    пер Процесс = ВыполнитьКомандуПакетногоРежима(Версия, МассивАргументов)
    пер Результат = 1
    Процесс.ОжидатьЗавершения()

    Результат = Процесс.ПолучитьКодВозврата()
    если Результат == 0 
        Консоль.Записать("База обновлена из хранилща " + ДатаВремя.Сейчас().Форматировать("ЧЧ:мм:сс"))
    иначе
        Консоль.Записать("Ошибка Обновления базы из хранилища")
    ;
;

// TODO ОбщаяБиблиотека
метод ВыгрузитьКонфигурациюВФайлы(ИмяПользователя : Строка, Пароль : Строка, КаталогВыгрузки : Строка)
    исп СоединениеАгент = новый СоединениеSsh("127.0.0.1", 1543, ИмяПользователя, Пароль)
    исп Агент = СоединениеАгент.ОткрытьКонсоль()
    пер Обновить = " --update"
    если не новый Файл(КаталогВыгрузки).Существует()
        Обновить = ""
    ;        

    Агент.СтрокаПриглашения = "designer> "
    Агент.Выполнить("options set --notify-progress yes")
    Агент.Выполнить("options set --notify-progress-interval 10.0")
    Агент.Выполнить("common connect-ib")
    Агент.Отправить("config dump-config-to-files --dir=%КаталогВыгрузки%Обновить") //TODO Сделать проверку, если каталог не существует, то без ключа Update
    Консоль.Записать(Агент.Вывод.ПрочитатьКакТекст())
        
    пока не Агент.ОжидатьПриглашение(60с)
        Консоль.Записать(Агент.Вывод.ПрочитатьКакТекст())
    ;
    Агент.Выполнить("common disconnect-ib")
    Консоль.Записать(Агент.Вывод.ПрочитатьКакТекст()) 
    Агент.Выполнить("common shutdown") 
    Консоль.Записать(Агент.Вывод.ПрочитатьКакТекст()) 
    Агент.Закрыть()
    СоединениеАгент.Закрыть()
;

метод КонвертацияВФорматEDT(КаталогВыгрузки : Строка, КаталогGIT : Строка, ВерсияEDT : Строка, ИмяПроекта : Строка)
    пер МассивАргументов = новый Массив()
    МассивАргументов.Добавить("edt@%ВерсияEDT")
    МассивАргументов.Добавить("workspace")
    МассивАргументов.Добавить("import")
    МассивАргументов.Добавить("--configuration-files")
    МассивАргументов.Добавить(КаталогВыгрузки)
    МассивАргументов.Добавить("--project-name")
    МассивАргументов.Добавить(ИмяПроекта)
    МассивАргументов.Добавить("--workspace-location")
    МассивАргументов.Добавить(КаталогGIT)

    пер КаталогВыгрузкиEDT =  новый Файл(КаталогGIT + "ИмяПроекта")
    если КаталогВыгрузкиEDT.Существует()
        Файлы.Удалить(КаталогВыгрузкиEDT)
    ;

    пер КонвертацияВEDT = новый ПроцессОс("ring.cmd", МассивАргументов)
    попытка
        КонвертацияВEDT.Запустить()    
    поймать Искл: Исключение
        Консоль.Записать(Искл.Описание)    
    ;

    пока КонвертацияВEDT.Живой()
        пер вывод = КонвертацияВEDT.ПотокВывода.ПрочитатьКакТекст(КодировкаПотокаВыводаПлатформы())
        если не вывод.Пусто()
            Консоль.Записать(вывод)    
        ;
    ;
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ВыполнитьКомандуПакетногоРежима(Версия: Строка, МассивАргументов : Массив) : ПроцессОс
    пер АрхитектураОС: Число = ТекущаяАрхитектура()
    пер ПутьV8: Строка

    если Версия.ЧислоВхождений(".") != 3
        Консоль.ЗаписатьОшибку("Номер версии указан некорректно")
        выбросить новый ИсключениеНедопустимоеСостояние("Номер версии указан некорректно")
    ;
    выбор

    когда АрхитектураОС == 32
        ПутьV8 = ПутиV8["eq"]
    когда АрхитектураОС == 64
        ПутьV8 = ПутиV8["ne"]
    иначе
        выбросить новый ИсключениеНедопустимоеСостояние("64-разрядная платформа V8 не может быть установлена на 32-разрядной ОС")
    ;

    пер Образ = новый Файл("%ПутьV8\\%Версия\\bin\\1cv8.exe")
    если не Образ.Существует()
        выбросить новый ИсключениеНедопустимоеСостояние("Экземляр платформы 1с не обнаружен в каталоге: " + Образ.Каталог)
    ;

    пер Процесс = новый ПроцессОс(Образ.Путь, МассивАргументов)
    Процесс.Запустить(СредаИсполнения.ПолучитьПеременную("temp"))
    если не Процесс.Живой()
        Консоль.ЗаписатьОшибку("Что-то пошло не так. Процесс 1с - не живой :(")
    иначе
        Консоль.Записать("Начало выполнения операции: " + ДатаВремя.Сейчас().Форматировать("ЧЧ:мм:сс"))
    ;
    возврат Процесс
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ПолучитьПутьКБазе(ИмяБазы : Строка, Сервер : Строка) : Строка
    пер путьКБазе : Строка
    если Сервер == "" 
        путьКБазе = "/F%ИмяБазы"
    иначе
        путьКБазе = "/s%Сервер\\%ИмяБазы"
    ;
    возврат путьКБазе   
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ТекущаяАрхитектура(): Число
    пер Архитектура = СредаИсполнения.ПолучитьПеременную("PROCESSOR_ARCHITECTURE")
    пер Результат = 0
    выбор Архитектура.ВВерхнийРегистр()
    когда == "AMD64"
        Результат = 64
    когда == "X86"
        Результат = 32
    иначе
        Результат = 32
    ;
    возврат Результат
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ПолучитьОбщийМассивПараметров(ПутьКБазе : Строка, ИмяПользователя : Строка, Пароль : Строка, Режим : Число = 0, ПутьКЛогамКонфигуратора : Строка = "") : Массив
    пер МассивАргументов = новый Массив() 
    если ПутьКЛогамКонфигуратора.Пусто()
        ПутьКЛогамКонфигуратора = РабочийКаталогПоУмолчанию + "cfglog.txt"
    ;
        
    МассивАргументов.Добавить(РежимЗапуска[Режим])
    МассивАргументов.Добавить("/WA-")
    МассивАргументов.Добавить("/DISABLESTARTUPDIALOGS")
    МассивАргументов.Добавить(ПутьКБазе)
    МассивАргументов.Добавить("/N%ИмяПользователя")
    МассивАргументов.Добавить("/P%Пароль")
    МассивАргументов.Добавить("/Out%ПутьКЛогамКонфигуратора")

    возврат МассивАргументов
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ПолучитьМассивДляРаботыСХранилищем(ПутьКХранилищу: Строка, ИмяПользователяХранилища : Строка, ПарольПользователяХранилища : Строка): Массив
    пер МассивПараметровХранилища = новый Массив()
    МассивПараметровХранилища.Добавить("/ConfigurationRepositoryF%ПутьКХранилищу")
    МассивПараметровХранилища.Добавить("/ConfigurationRepositoryN%ИмяПользователяХранилища")
    МассивПараметровХранилища.Добавить("/ConfigurationRepositoryP%ПарольПользователяХранилища")

    возврат МассивПараметровХранилища
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ЗапуститьАгентКонфигуратора(Версия: Строка, ПутьКБазе : Строка, РабочийКаталог : Строка = "") : ПроцессОс
    пер АрхитектураОС: Число = ТекущаяАрхитектура()
    пер ПутьV8: Строка

    если Версия.ЧислоВхождений(".") != 3
        Консоль.ЗаписатьОшибку("Номер версии указан некорректно")
        выбросить новый ИсключениеНедопустимоеСостояние("Номер версии указан некорректно")
    ;
    выбор

    когда АрхитектураОС == 32
        ПутьV8 = ПутиV8["eq"]
    когда АрхитектураОС == 64
        ПутьV8 = ПутиV8["ne"]
    иначе
        выбросить новый ИсключениеНедопустимоеСостояние("64-разрядная платформа V8 не может быть установлена на 32-разрядной ОС")
    ;

    пер Образ = новый Файл("%ПутьV8\\%Версия\\bin\\1cv8.exe")
    если не Образ.Существует()
        Консоль.ЗаписатьОшибку("Экземляр платформы 1с не обнаружен в каталоге: " + Образ.Каталог) 
    ;

    если РабочийКаталог.Пусто()
        РабочийКаталог = "/AgentBaseDir " + РабочийКаталогПоУмолчанию
    иначе
        РабочийКаталог = "/AgentBaseDir " + РабочийКаталог
    ;

    пер Процесс = новый ПроцессОс(Образ.Путь, ["DESIGNER", ПутьКБазе, "/AgentMode", "/AgentSSHHostKeyAuto", РабочийКаталог])
    Процесс.Запустить(СредаИсполнения.ПолучитьПеременную("temp"))
    если не Процесс.Живой()
        Консоль.ЗаписатьОшибку("Что-то пошло не так. Процесс 1с - не живой :(")
    иначе
        Консоль.Записать("Конфигуратор запущен в режиме агента")
    ;
    возврат Процесс
;

/* 
 * Sonarqube API
 */

 перечисление ОперационныеСистемы
	Windows,
	MacOS,
	Linux
;

структура SonarqubeGenericFormat
	знч issues: Массив
	знч rules: Массив
;

структура SonarqubeTextRange
	знч startLine: Число

//	пер endLine: Число = 0
//	пер startColumn: Число = 0
//	пер endColumn: Число = 0
	конструктор(startLine)
;

структура SonarqubeLocation
	знч message: Строка
	знч filePath: Строка
	пер textRange: SonarqubeTextRange|Неопределено

	конструктор(message, filePath)
;

перечисление SonarqubeType
	BUG,
	VULNERABILITY,
	CODE_SMELL
;

перечисление SonarqubeSeverity
	BLOCKER,
	CRITICAL,
	MAJOR,
	MINOR,
	INFO
;

структура SonarqubeIssue
	знч engineId: Строка
	знч ruleId: Строка
	знч primaryLocation: SonarqubeLocation
	знч type: SonarqubeType
	знч severity: SonarqubeSeverity

//	пер effortMinutes: Число = 0
//	пер secondaryLocations: SonarqubeLocation|Неопределено
	конструктор(engineId, ruleId, primaryLocation, type, severity)
;

структура BslLsRule
	знч engineId: Строка
	знч ruleId: Строка
	знч name: Строка
	знч type: SonarqubeType
	знч severity: SonarqubeSeverity
	знч description: Строка
;

метод КодировкаПотокаВыводаПлатформы(): Строка
	если ИспользуемаяОС() == ОперационныеСистемы.Windows
		возврат "windows-1251"
	;

	возврат "UTF-8"
;

метод ИспользуемаяОС(): ОперационныеСистемы
	знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")

	выбор когда имяОС.НачинаетсяС("windows", Истина)
		возврат ОперационныеСистемы.Windows

	когда имяОС.Содержит("mac", Истина)
		возврат ОперационныеСистемы.MacOS

	когда имяОС.Содержит("nux", Истина)
		возврат ОперационныеСистемы.Linux

	иначе
		выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная ОС")
	;
;

метод СохранитьНастройкиСканера(имяФайлаПараметров: Строка, сервер: Строка, ключПроекта: Строка,
	наименованиеПроекта: Строка, версияПроекта: Строка, путьКонфигурацииЕДТ: Строка, файлSonarQube: Строка)
	знч файлПараметров = новый Файл(имяФайлаПараметров)
	исп поток = файлПараметров.ОткрытьПотокЗаписи()

	пер запись = новый ЗаписьДанных(поток)

	знч наименованиеПроектаUnicode = СтрокуВUnicode(наименованиеПроекта)
	знч путьКонфигурацииЕДТUnicode = СтрокуВUnicode(путьКонфигурацииЕДТ.Заменить("\\", "/"))
	знч файлSonarQubeUnicode = СтрокуВUnicode(файлSonarQube.Заменить("\\", "/"))

	запись.ЗаписатьСтроку("sonar.host.url=%сервер")
	запись.ЗаписатьСтроку("sonar.projectKey=%ключПроекта")
	запись.ЗаписатьСтроку("sonar.projectName=%наименованиеПроектаUnicode")
	запись.ЗаписатьСтроку("sonar.projectVersion=%версияПроекта")
	запись.ЗаписатьСтроку("sonar.sourceEncoding=UTF-8")
	запись.ЗаписатьСтроку("sonar.inclusions=**/*.bsl")
	запись.ЗаписатьСтроку("sonar.sources=src")
	запись.ЗаписатьСтроку("sonar.projectBaseDir=%путьКонфигурацииЕДТUnicode")
	запись.ЗаписатьСтроку("sonar.scm.enabled=true")
	запись.ЗаписатьСтроку("sonar.scm.provider=git")
	запись.ЗаписатьСтроку("sonar.externalIssuesReportPaths=%файлSonarQubeUnicode")
;

метод ЗапуститьSonarScanner(имяФайлаПараметров: Строка, токен: Строка)
	знч SONARQUBE_PATH = СредаИсполнения.ПолучитьПеременную("SONARQUBE_PATH")

	пер имяКоманды = ""
	знч версияОС = ИспользуемаяОС()
	выбор версияОС
	когда ОперационныеСистемы.Windows
		имяКоманды = "%SONARQUBE_PATH/sonar-scanner.bat"
	иначе
		имяКоманды = "%SONARQUBE_PATH/sonar-scanner"
	;

	пер параметры = новый Массив()
	параметры.Добавить("-Dproject.settings=\"%имяФайлаПараметров\"")
	параметры.Добавить("-D\"sonar.login=%токен\"")

	пер процесс = новый ПроцессОс(имяКоманды, параметры, Ложь)
	процесс.Запустить()
	исп результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()

	пока не процесс.ОжидатьЗавершения(60с)
		знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
		если не текстРезультата.Пусто()
			Консоль.Записать(текстРезультата)
		;
	;

	знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
	если не текстРезультата.Пусто()
		Консоль.Записать(текстРезультата)
	;

	знч кодВозврата = процесс.ПолучитьКодВозврата()

	если кодВозврата == 0
		Консоль.Записать("SonarQube Scanner успешно запущен.")
	возврат
	;

	пер текстОшибки = "Код возврата: %кодВозврата"

	текстОшибки += Строки.Шаблон("\в\нКоманда: $0\в\нПараметры: $1", [имяКоманды, Строки.Соединить(параметры, " ")])

	исп ошибкиВыполненияСкрипта = процесс.ПолучитьПотокОшибок()
	текстОшибки += "\в\н" + ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВыводаПлатформы())
	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

метод СтрокуВUnicode(исходнаяСтрока: Строка): Строка
	пер результат = ""

	пер кодыДопустимыхСимволов = новый Массив()
	кодыДопустимыхСимволов.Добавить(1105) // "ё"
	кодыДопустимыхСимволов.Добавить(1025) // "Ё"

	для номер = 0 по исходнаяСтрока.Длина() - 1
		знч кодСимвола = Символы.ПолучитьКод(исходнаяСтрока.Символ(номер))
		знч оставить = ((кодСимвола < 1040) или (кодСимвола > 1103)) и (кодыДопустимыхСимволов.Найти(кодСимвола) == Неопределено)
		если оставить
			результат += исходнаяСтрока.Символ(номер)
		иначе
			результат += "\\u" + DecToHex(кодСимвола)
		;
	;

	возврат результат
;

метод DecToHex(десятичноеЧисло: Число): Строка
	пер база = 16

	пер результат = ""

	пока десятичноеЧисло != 0
		пер поз = десятичноеЧисло % база

		результат = "0123456789ABCDEF".Символ(поз) + результат

		десятичноеЧисло = (десятичноеЧисло / база).ЦелаяЧасть()
	;
	результат = "0000" + результат

	возврат результат.ПодстрокаСКонца(4)
;

метод SonarScannerDocker(СерверSonarQube : Строка, КаталогПроекта : Строка, КаталогКешаСканера : Строка)

	знч версияОС = ИспользуемаяОС()
    //docker run --rm -e SONAR_HOST_URL="http://192.168.0.235:32772" -v "C:\temp\executor\utvik\:/usr/src" -v "C:\temp\executor\sonartemp\:/opt/sonar-scanner/.sonar/cache" sonarsource/sonar-scanner-cli -Dproject.settings=/usr/src/sonar-scanner.properties
	пер параметры = новый Массив()
    параметры.Добавить("run")
    параметры.Добавить("--rm")
    параметры.Добавить("-e")
    параметры.Добавить("SONAR_HOST_URL=\"%СерверSonarQube\"")
    параметры.Добавить("-v")
    параметры.Добавить("\"%КаталогПроекта:/usr/src\"")
    параметры.Добавить("-v")
    параметры.Добавить("\"%КаталогКешаСканера:/opt/sonar-scanner/.sonar/cache\"")
    параметры.Добавить("sonarsource/sonar-scanner-cli")
	параметры.Добавить("-Dproject.settings=/usr/src/sonar-scanner.properties")
	//параметры.Добавить("-D\"sonar.login=%токен\"")

	пер процесс = новый ПроцессОс("docker", параметры, Ложь)
	процесс.Запустить()
	исп результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()

	пока не процесс.ОжидатьЗавершения(60с)
		знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
		если не текстРезультата.Пусто()
			Консоль.Записать(текстРезультата)
		;
	;

	знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
	если не текстРезультата.Пусто()
		Консоль.Записать(текстРезультата)
	;

	знч кодВозврата = процесс.ПолучитьКодВозврата()

	если кодВозврата == 0
		Консоль.Записать("SonarQube Scanner успешно запущен.")
	возврат
	;

	пер текстОшибки = "Код возврата: %кодВозврата"

	текстОшибки += Строки.Шаблон("\в\нПараметры: $1", [Строки.Соединить(параметры, " ")])

	исп ошибкиВыполненияСкрипта = процесс.ПолучитьПотокОшибок()
	текстОшибки += "\в\н" + ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВыводаПлатформы())
	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;