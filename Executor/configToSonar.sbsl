конст ПутиV8 = {"eq": "c:\\Program Files\\1Cv8\\", "ne": "c:\\Program Files (x86)\\1Cv8\\"}
конст РабочийКаталогПоУмолчанию = "c:\\temp\\executor\\"
конст РежимЗапуска = {0 : "DESIGNER", 1 : "ENTERPRISE"}

метод Скрипт(ПутьКФайлуНастроек : Строка)
    // Обновить конфигурацию из хранилища
    // Выгрузить конфигурацию в файлы
    // Конвертировать в формат EDT
    //  Коммит и пуш в гит
    // запуск задания в Jenkins
    пер ФайлНастроек = новый Файл(ПутьКФайлуНастроек)
    пер Настройки = СериализацияJson.ПрочитатьОбъект(ФайлНастроек.ОткрытьПотокЧтения())
    
    пер ИмяБазы = Настройки["base"]
    Консоль.Записать("Имя базы: %ИмяБазы")
    пер Сервер = Настройки["server"]
    Консоль.Записать("Адрес сервера: %Сервер")
    пер Версия = Настройки["platformVersion"]
    Консоль.Записать("Версия платформы: %Версия")
    пер ИмяПользователя = Настройки["baseUsername"]
    Консоль.Записать("Пользователь  базы: %ИмяПользователя")
    пер Пароль = Настройки["basePassword"]
    Консоль.Записать("Пароль: %Пароль")
    пер ПутьКХранилищу = Настройки["storage"]
    Консоль.Записать("Хранилище: %ПутьКХранилищу")
    пер ИмяПользователяХранилища = Настройки["storageUser"]
    Консоль.Записать("Пользователь хранилища: %ИмяПользователяХранилища")
    пер ПарольПользователяХранилища = Настройки["storagePassword"]
    пер КаталогВыгрузки = Настройки["exportDirectory"]
    Консоль.Записать("Католог выгрузки: %КаталогВыгрузки")
    пер КаталогGIT = Настройки["gitDirectory"]
    Консоль.Записать("Католог GIT: %КаталогGIT")
    пер ВерсияEDT = Настройки["edtVersion"]
    Консоль.Записать("Версия EDT: %ВерсияEDT")
    пер РепозиторийНаСервере = Настройки["gitURL"]
    Консоль.Записать("Репозиторий на сервере: %РепозиторийНаСервере")
    пер ИмяРепозитория = ПолучитьИмяРепозитория(РепозиторийНаСервере)
    Консоль.Записать(ИмяРепозитория)
    пер ИмяПроекта = Настройки["projectName"]
    Консоль.Записать("Имя проекта: %ИмяПроекта")

    пер ПутьКБазе = ПолучитьПутьКБазе(ИмяБазы, Сервер)
    пер ПроцессАгента = ЗапуститьАгентКонфигуратора(Версия, ПутьКБазе, "")
    если КаталогВыгрузки.Пусто()      
        КаталогВыгрузки = РабочийКаталогПоУмолчанию + "%ИмяБазы"
    ;
    если КаталогGIT.Пусто()      
        КаталогGIT = РабочийКаталогПоУмолчанию
    ;
    пер РепозиторийЛокальный = новый Файл(КаталогGIT + ИмяРепозитория)

    ОбновитьКонфигурациюИзХранилища(ИмяБазы, Сервер, ИмяПользователя, Пароль, ПутьКХранилищу, ИмяПользователяХранилища, ПарольПользователяХранилища, Версия)
    ВыгрузитьКонфигурациюВФайлы(ИмяПользователя, Пароль, КаталогВыгрузки)
    
    если РепозиторийЛокальный.Существует()
        
    иначе
     //  скачатьРепозиторийССервера(РепозиторийНаСервере, КаталогGIT)    
    ;
    КонвертацияВФорматEDT(КаталогВыгрузки, КаталогGIT, ВерсияEDT, ИмяПроекта)
;

// TODO Общая Библиотека
метод ОбновитьКонфигурациюИзХранилища(ИмяБазы : Строка, Сервер : Строка, ИмяПользователя : Строка, Пароль : Строка, ПутьКХранилищу : Строка, ИмяПользователяХранилища : Строка, ПарольПользователяХранилища : Строка, Версия : Строка, ПутьКЛогамКонфигуратора : Строка = "")
    Консоль.Записать("")
    Консоль.Записать("Обновление конфигурации из хранилища")
    
    пер ПутьКБазе = ПолучитьПутьКБазе(ИмяБазы, Сервер)
    пер МассивАргументов = ПолучитьОбщийМассивПараметров(ПутьКБазе, ИмяПользователя, Пароль)       
    пер МассивАргументовХранилища = ПолучитьМассивДляРаботыСХранилищем(ПутьКХранилищу, ИмяПользователяХранилища, ПарольПользователяХранилища)

    МассивАргументов.ДобавитьВсе(МассивАргументовХранилища)
    
    МассивАргументов.Добавить("/ConfigurationRepositoryUpdateCfg")
    МассивАргументов.Добавить("-force")
    МассивАргументов.Добавить("/UpdateDBCfg")
    пер Процесс = ВыполнитьКомандуПакетногоРежима(Версия, МассивАргументов)
    пер Результат = 1
    Процесс.ОжидатьЗавершения()

    Результат = Процесс.ПолучитьКодВозврата()
    если Результат == 0 
        Консоль.Записать("База обновлена из хранилща " + ДатаВремя.Сейчас().Форматировать("ЧЧ:мм:сс"))
    иначе
        Консоль.Записать("Ошибка Обновления базы из хранилища")
    ;
;

// TODO ОбщаяБиблиотека
метод ВыгрузитьКонфигурациюВФайлы(ИмяПользователя : Строка, Пароль : Строка, КаталогВыгрузки : Строка)
    исп СоединениеАгент = новый СоединениеSsh("127.0.0.1", 1543, ИмяПользователя, Пароль)
    исп Агент = СоединениеАгент.ОткрытьКонсоль()
            
    Агент.СтрокаПриглашения = "designer> "
    Агент.Выполнить("options set --notify-progress yes")
    Агент.Выполнить("options set --notify-progress-interval 10.0")
    Агент.Выполнить("common connect-ib")
    Агент.Отправить("config dump-config-to-files --dir=%КаталогВыгрузки --update") //TODO Сделать проверку, если каталог не существует, то без ключа Update
    Консоль.Записать(Агент.Вывод.ПрочитатьКакТекст())
        
    пер вывод = ""
    пока вывод != "Прогресс:  100\%"
    вывод = Агент.Вывод.ПрочитатьКакТекст()
        если не вывод.Пусто()
            Консоль.Записать(вывод)    
        ;
    ;
    Агент.Выполнить("common shutdown") 
    Консоль.Записать(Агент.Вывод.ПрочитатьКакТекст()) 
    Агент.Закрыть()
;

метод КонвертацияВФорматEDT(КаталогВыгрузки : Строка, КаталогGIT : Строка, ВерсияEDT : Строка, ИмяПроекта : Строка)
    пер МассивАргументов = новый Массив()
    // МассивАргументов.Добавить("/c")
    // МассивАргументов.Добавить("ring")
    МассивАргументов.Добавить("edt@%ВерсияEDT")
    МассивАргументов.Добавить("workspace")
    МассивАргументов.Добавить("import")
    МассивАргументов.Добавить("--configuration-files")
    МассивАргументов.Добавить(КаталогВыгрузки)
    МассивАргументов.Добавить("--project-name")
    МассивАргументов.Добавить(ИмяПроекта)
    МассивАргументов.Добавить("--workspace-location")
    МассивАргументов.Добавить(КаталогGIT)

    пер КонвертацияВEDT = новый ПроцессОс("ring.cmd", МассивАргументов)
    попытка
        КонвертацияВEDT.Запустить()    
    поймать Искл: Исключение
        Консоль.Записать(Искл.Описание)    
    ;

    пока КонвертацияВEDT.Живой()
        пер вывод = КонвертацияВEDT.ПотокВывода.ПрочитатьКакТекст("windows-1251")
        если не вывод.Пусто()
            Консоль.Записать(вывод)    
        ;
    ;
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ВыполнитьКомандуПакетногоРежима(Версия: Строка, МассивАргументов : Массив) : ПроцессОс
    пер АрхитектураОС: Число = ТекущаяАрхитектура()
    пер ПутьV8: Строка

    если Версия.ЧислоВхождений(".") != 3
        Консоль.ЗаписатьОшибку("Номер версии указан некорректно")
        выбросить новый ИсключениеНедопустимоеСостояние("Номер версии указан некорректно")
    ;
    выбор

    когда АрхитектураОС == 32
        ПутьV8 = ПутиV8["eq"]
    когда АрхитектураОС == 64
        ПутьV8 = ПутиV8["ne"]
    иначе
        выбросить новый ИсключениеНедопустимоеСостояние("64-разрядная платформа V8 не может быть установлена на 32-разрядной ОС")
    ;

    пер Образ = новый Файл("%ПутьV8\\%Версия\\bin\\1cv8.exe")
    если не Образ.Существует()
        выбросить новый ИсключениеНедопустимоеСостояние("Экземляр платформы 1с не обнаружен в каталоге: " + Образ.Каталог)
    ;

    пер Процесс = новый ПроцессОс(Образ.Путь, МассивАргументов)
    Процесс.Запустить(СредаИсполнения.ПолучитьПеременную("temp"))
    если не Процесс.Живой()
        Консоль.ЗаписатьОшибку("Что-то пошло не так. Процесс 1с - не живой :(")
    иначе
        Консоль.Записать("Начало выполнения операции: " + ДатаВремя.Сейчас().Форматировать("ЧЧ:мм:сс"))
    ;
    возврат Процесс
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ПолучитьПутьКБазе(ИмяБазы : Строка, Сервер : Строка) : Строка
    пер путьКБазе : Строка
    если Сервер == "" 
        путьКБазе = "/F%ИмяБазы"
    иначе
        путьКБазе = "/s%Сервер\\%ИмяБазы"
    ;
    возврат путьКБазе   
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ТекущаяАрхитектура(): Число
    пер Архитектура = СредаИсполнения.ПолучитьПеременную("PROCESSOR_ARCHITECTURE")
    пер Результат = 0
    выбор Архитектура.ВВерхнийРегистр()
    когда == "AMD64"
        Результат = 64
    когда == "X86"
        Результат = 32
    иначе
        Результат = 32
    ;
    возврат Результат
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ПолучитьОбщийМассивПараметров(ПутьКБазе : Строка, ИмяПользователя : Строка, Пароль : Строка, Режим : Число = 0, ПутьКЛогамКонфигуратора : Строка = "") : Массив
    пер МассивАргументов = новый Массив() 
    если ПутьКЛогамКонфигуратора.Пусто()
        ПутьКЛогамКонфигуратора = РабочийКаталогПоУмолчанию + "cfglog.txt"
    ;
        
    МассивАргументов.Добавить(РежимЗапуска[Режим])
    МассивАргументов.Добавить("/WA-")
    МассивАргументов.Добавить("/DISABLESTARTUPDIALOGS")
    МассивАргументов.Добавить(ПутьКБазе)
    МассивАргументов.Добавить("/N%ИмяПользователя")
    МассивАргументов.Добавить("/P%Пароль")
    МассивАргументов.Добавить("/Out%ПутьКЛогамКонфигуратора")

    возврат МассивАргументов
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ПолучитьМассивДляРаботыСХранилищем(ПутьКХранилищу: Строка, ИмяПользователяХранилища : Строка, ПарольПользователяХранилища : Строка): Массив
    пер МассивПараметровХранилища = новый Массив()
    МассивПараметровХранилища.Добавить("/ConfigurationRepositoryF%ПутьКХранилищу")
    МассивПараметровХранилища.Добавить("/ConfigurationRepositoryN%ИмяПользователяХранилища")
    МассивПараметровХранилища.Добавить("/ConfigurationRepositoryP%ПарольПользователяХранилища")

    возврат МассивПараметровХранилища
;

// TODO Перенести в общую библиотеку, когда это будет доступно
метод ЗапуститьАгентКонфигуратора(Версия: Строка, ПутьКБазе : Строка, РабочийКаталог : Строка = "") : ПроцессОс
    пер АрхитектураОС: Число = ТекущаяАрхитектура()
    пер ПутьV8: Строка

    если Версия.ЧислоВхождений(".") != 3
        Консоль.ЗаписатьОшибку("Номер версии указан некорректно")
        выбросить новый ИсключениеНедопустимоеСостояние("Номер версии указан некорректно")
    ;
    выбор

    когда АрхитектураОС == 32
        ПутьV8 = ПутиV8["eq"]
    когда АрхитектураОС == 64
        ПутьV8 = ПутиV8["ne"]
    иначе
        выбросить новый ИсключениеНедопустимоеСостояние("64-разрядная платформа V8 не может быть установлена на 32-разрядной ОС")
    ;

    пер Образ = новый Файл("%ПутьV8\\%Версия\\bin\\1cv8.exe")
    если не Образ.Существует()
        Консоль.ЗаписатьОшибку("Экземляр платформы 1с не обнаружен в каталоге: " + Образ.Каталог) 
    ;

    если РабочийКаталог.Пусто()
        РабочийКаталог = "/AgentBaseDir " + РабочийКаталогПоУмолчанию
    иначе
        РабочийКаталог = "/AgentBaseDir " + РабочийКаталог
    ;

    пер Процесс = новый ПроцессОс(Образ.Путь, ["DESIGNER", ПутьКБазе, "/AgentMode", "/AgentSSHHostKeyAuto", РабочийКаталог])
    Процесс.Запустить(СредаИсполнения.ПолучитьПеременную("temp"))
    если не Процесс.Живой()
        Консоль.ЗаписатьОшибку("Что-то пошло не так. Процесс 1с - не живой :(")
    иначе
        Консоль.Записать("Конфигуратор запущен в режиме агента")
    ;
    возврат Процесс
;

метод ПолучитьИмяРепозитория(РепозиторийНаСервере : Строка) : Строка
    пер МассивПодстрок = РепозиторийНаСервере.Разделить("\\")
    пер имяСРасширением = МассивПодстрок.Последний()
    возврат имяСРасширением.Удалить(".git")
;

метод скачатьРепозиторийССервера(РепозиторийНаСервере : Строка, КаталогGIT : Строка)
    пер МассивАргументов = новый  Массив()
    // МассивАргументов.Добавить("/c")
    // МассивАргументов.Добавить("git")
    МассивАргументов.Добавить("clone")
    МассивАргументов.Добавить(РепозиторийНаСервере)
    пер КоманднаяСтрока = новый ПроцессОс("git", МассивАргументов)
    КоманднаяСтрока.Запустить(КаталогGIT)

    пока КоманднаяСтрока.Живой()
        Консоль.Записать(КоманднаяСтрока.ПолучитьПотокВывода().ПрочитатьКакТекст())
    ;
;